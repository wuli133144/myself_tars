// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.1.0.
// **********************************************************************

#ifndef __HELLO_H_
#define __HELLO_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace TestApp
{
    struct userinfo : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "TestApp.userinfo";
        }
        static string MD5()
        {
            return "b0295989dbf7904c1b79325151e91f5d";
        }
        userinfo()
        :im_user_uid(0),username(""),passwd(""),group_num(0),status(0),create_ts(0),update_ts(0)
        {
        }
        void resetDefautlt()
        {
            im_user_uid = 0;
            username = "";
            passwd = "";
            group_num = 0;
            status = 0;
            create_ts = 0;
            update_ts = 0;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(im_user_uid, 1);
            _os.write(username, 2);
            _os.write(passwd, 3);
            _os.write(group_num, 4);
            _os.write(status, 5);
            _os.write(create_ts, 6);
            _os.write(update_ts, 7);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(im_user_uid, 1, true);
            _is.read(username, 2, true);
            _is.read(passwd, 3, true);
            _is.read(group_num, 4, true);
            _is.read(status, 5, true);
            _is.read(create_ts, 6, true);
            _is.read(update_ts, 7, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(im_user_uid,"im_user_uid");
            _ds.display(username,"username");
            _ds.display(passwd,"passwd");
            _ds.display(group_num,"group_num");
            _ds.display(status,"status");
            _ds.display(create_ts,"create_ts");
            _ds.display(update_ts,"update_ts");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(im_user_uid, true);
            _ds.displaySimple(username, true);
            _ds.displaySimple(passwd, true);
            _ds.displaySimple(group_num, true);
            _ds.displaySimple(status, true);
            _ds.displaySimple(create_ts, true);
            _ds.displaySimple(update_ts, false);
            return _os;
        }
    public:
        tars::Int32 im_user_uid;
        std::string username;
        std::string passwd;
        tars::Int32 group_num;
        tars::Int32 status;
        tars::Int32 create_ts;
        tars::Int32 update_ts;
    };
    inline bool operator==(const userinfo&l, const userinfo&r)
    {
        return l.im_user_uid == r.im_user_uid && l.username == r.username && l.passwd == r.passwd && l.group_num == r.group_num && l.status == r.status && l.create_ts == r.create_ts && l.update_ts == r.update_ts;
    }
    inline bool operator!=(const userinfo&l, const userinfo&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class getuserinfoPrxCallback: public tars::ServantProxyCallback
    {
    public:
        virtual ~getuserinfoPrxCallback(){}
        virtual void callback_GetUserinfo( const TestApp::userinfo& user)
        { throw std::runtime_error("callback_GetUserinfo() override incorrect."); }
        virtual void callback_GetUserinfo_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_GetUserinfo_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw TC_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __getuserinfo_all[]=
            {
                "GetUserinfo"
            };
            pair<string*, string*> r = equal_range(__getuserinfo_all, __getuserinfo_all+1, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __getuserinfo_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_GetUserinfo_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    TestApp::userinfo user;
                    _is.read(user, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_GetUserinfo(user);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<getuserinfoPrxCallback> getuserinfoPrxCallbackPtr;

    /* callback of promise async proxy for client */
    class getuserinfoPrxCallbackPromise: public tars::ServantProxyCallback
    {
    public:
        virtual ~getuserinfoPrxCallbackPromise(){}
    public:
        struct PromiseGetUserinfo: virtual public TC_HandleBase
        {
        public:
            TestApp::userinfo user;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< getuserinfoPrxCallbackPromise::PromiseGetUserinfo > PromiseGetUserinfoPtr;

        getuserinfoPrxCallbackPromise(const promise::Promise< getuserinfoPrxCallbackPromise::PromiseGetUserinfoPtr > &promise)
        : _promise_GetUserinfo(promise)
        {}
        
        virtual void callback_GetUserinfo(const getuserinfoPrxCallbackPromise::PromiseGetUserinfoPtr &ptr)
        {
            _promise_GetUserinfo.setValue(ptr);
        }
        virtual void callback_GetUserinfo_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:GetUserinfo_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_GetUserinfo.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< getuserinfoPrxCallbackPromise::PromiseGetUserinfoPtr > _promise_GetUserinfo;

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __getuserinfo_all[]=
            {
                "GetUserinfo"
            };

            pair<string*, string*> r = equal_range(__getuserinfo_all, __getuserinfo_all+1, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __getuserinfo_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_GetUserinfo_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    getuserinfoPrxCallbackPromise::PromiseGetUserinfoPtr ptr = new getuserinfoPrxCallbackPromise::PromiseGetUserinfo();

                    try
                    {
                        _is.read(ptr->user, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_GetUserinfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_GetUserinfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_GetUserinfo(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<getuserinfoPrxCallbackPromise> getuserinfoPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class getuserinfoCoroPrxCallback: public getuserinfoPrxCallback
    {
    public:
        virtual ~getuserinfoCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __getuserinfo_all[]=
            {
                "GetUserinfo"
            };

            pair<string*, string*> r = equal_range(__getuserinfo_all, __getuserinfo_all+1, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __getuserinfo_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_GetUserinfo_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        TestApp::userinfo user;
                        _is.read(user, 2, true);
                        setResponseContext(msg->response.context);

                        callback_GetUserinfo(user);

                    }
                    catch(std::exception &ex)
                    {
                        callback_GetUserinfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_GetUserinfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef tars::TC_AutoPtr<getuserinfoCoroPrxCallback> getuserinfoCoroPrxCallbackPtr;

    /* proxy for client */
    class getuserinfoProxy : public tars::ServantProxy
    {
    public:
        typedef map<string, string> TARS_CONTEXT;
        void GetUserinfo(tars::Int32 uid,TestApp::userinfo &user,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(uid, 1);
            _os.write(user, 2);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"GetUserinfo", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            _is.read(user, 2, true);
        }

        void async_GetUserinfo(getuserinfoPrxCallbackPtr callback,tars::Int32 uid,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(uid, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"GetUserinfo", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< getuserinfoPrxCallbackPromise::PromiseGetUserinfoPtr > promise_async_GetUserinfo(tars::Int32 uid,const map<string, string>& context)
        {
            promise::Promise< getuserinfoPrxCallbackPromise::PromiseGetUserinfoPtr > promise;
            getuserinfoPrxCallbackPromisePtr callback = new getuserinfoPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(uid, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"GetUserinfo", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_GetUserinfo(getuserinfoCoroPrxCallbackPtr callback,tars::Int32 uid,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(uid, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"GetUserinfo", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        getuserinfoProxy* tars_hash(int64_t key)
        {
            return (getuserinfoProxy*)ServantProxy::tars_hash(key);
        }

        getuserinfoProxy* tars_consistent_hash(int64_t key)
        {
            return (getuserinfoProxy*)ServantProxy::tars_consistent_hash(key);
        }

        getuserinfoProxy* tars_set_timeout(int msecond)
        {
            return (getuserinfoProxy*)ServantProxy::tars_set_timeout(msecond);
        }

    };
    typedef tars::TC_AutoPtr<getuserinfoProxy> getuserinfoPrx;

    /* servant for server */
    class getuserinfo : public tars::Servant
    {
    public:
        virtual ~getuserinfo(){}
        virtual void GetUserinfo(tars::Int32 uid,TestApp::userinfo &user,tars::TarsCurrentPtr current) = 0;
        static void async_response_GetUserinfo(tars::TarsCurrentPtr current, const TestApp::userinfo &user)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("user", user);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(user, 2);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

    public:
        int onDispatch(tars::TarsCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __TestApp__getuserinfo_all[]=
            {
                "GetUserinfo"
            };

            pair<string*, string*> r = equal_range(__TestApp__getuserinfo_all, __TestApp__getuserinfo_all+1, _current->getFuncName());
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __TestApp__getuserinfo_all)
            {
                case 0:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    tars::Int32 uid;
                    TestApp::userinfo user;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("uid", uid);
                        tarsAttr.getByDefault("user", user, user);
                    }
                    else
                    {
                        _is.read(uid, 1, true);
                        _is.read(user, 2, false);
                    }
                    GetUserinfo(uid,user, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("user", user);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(user, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }
    };


}



#endif
